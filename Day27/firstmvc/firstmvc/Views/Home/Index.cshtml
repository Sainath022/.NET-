@{
    ViewData["Title"] = "Home Page";
}

@*<div class="text-center">
    <h1 class="display-4">Demo Controller</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>*@

@{
    var joe = new Customer(33,"Joe"); 
}

<p>Id of Joe is @(joe.Id)</p> @*Explicit razor expression*@

<p>Last week: @DateTime.Now </p> @*Explicit razor expression*@

@("<span>Hello World</span>") @*Expression Encoding*@



@*Razor Code Blocks*@



@{
    var quote = "The future depends on what you do today. - Mahatma Gandhi";
}

<p>@quote</p>

@{
    quote = "Hate cannot drive out hate, only love can do that. - Martin Luther King, Jr.";
}

<p>@quote</p>

@{
    void RenderName(string name)
    {
        <p>Name: <strong>@name</strong></p>
    }

    RenderName("Mahatma Gandhi");
    RenderName("Martin Luther King, Jr.");
}

@*Implicit transitions*@
@{
    var inCSharp = true;
    <p>Now in HTML, was in C# @inCSharp</p>
}
@*Conditional Attribute rendering*@

<div class="@false">False</div>
<div class="@null">Null</div>
<div class="@("")">Empty</div>
<div class="@("false")">False String</div>
<div class="@("active")">String</div>
<input type="checkbox" checked="@true" name="true" />
<input type="checkbox" checked="@false" name="false" />
<input type="checkbox" checked="@null" name="null" />

@*Control structures*@
@switch (22)
{
    case 1:
        <p>The value is 1!</p>
        break;
    case 1337:
        <p>Your number is 1337!</p>
        break;
    default:
        <p>Your number wasn't 1 or 1337.</p>
        break;
}

@{
    var people = new Customer[]
    {
          new Customer(33,"Weston"),
          new Customer(41,"Johnathon"),
          
    };
}


@for (var i = 0; i < people.Length; i++)
{
    var Customer = people[i];
    <p>Name: @Customer.Name</p>
    <p>Age: @Customer.Id</p>
}
@*Compound*@
@using (Html.BeginForm())
{
    <div>
        Email: <input type="email" id="Email" value="">
        <button>Register</button>
    </div>
}

@try
{
    throw new InvalidOperationException("You did something invalid.");
}
catch (Exception ex)
{
    <p>The exception message: @ex.Message</p>
}
finally
{
    <p>The finally statement.</p>
}

